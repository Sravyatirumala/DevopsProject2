pipeline {
    agent any

    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'amazon-prime', description: 'Enter repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '123456789012', description: 'Enter AWS Account ID')
    }

    tools {
        jdk 'jdk17'
        nodejs 'nodeJS'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner' // Tool name from Global Tool Config
    }

    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Sravyatirumala/DevopsProject2.git'
            }
        }

        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=amazon-prime \
                        -Dsonar.projectName=amazon-prime \
                        -Dsonar.sourceEncoding=UTF-8
                    """
                }
            }
        }

        stage('3. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }

        stage('4. Install npm') {
            steps {
                sh 'npm install'
            }
        }

        stage('5. Trivy Scan') {
            steps {
                sh 'trivy fs . > trivy-scan-results.txt'
            }
        }

        stage('6. Build Docker Image') {
            steps {
                sh "docker build -t ${params.ECR_REPO_NAME} ."
            }
        }

        stage('7. Create ECR repo') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESSKEY'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRETKEY')
                ]) {
                    sh """
                        aws configure set aws_access_key_id ${AWS_ACCESSKEY}
                        aws configure set aws_secret_access_key ${AWS_SECRETKEY}
                        aws ecr describe-repositories --repository-names ${params.ECR_REPO_NAME} --region us-east-2 || \
                        aws ecr create-repository --repository-name ${params.ECR_REPO_NAME} --region us-east-2
                    """
                }
            }
        }

        stage('8. Login to ECR & tag image') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESSKEY'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRETKEY')
                ]) {
                    sh """
                        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
                        docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                        docker tag ${params.ECR_REPO_NAME} ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }
            }
        }

        stage('9. Push image to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESSKEY'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRETKEY')
                ]) {
                    sh """
                        docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                        docker push ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    """
                }
            }
        }

        stage('10. Cleanup Images') {
            steps {
                sh """
                    docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/${params.ECR_REPO_NAME}:${BUILD_NUMBER}
                    docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/${params.ECR_REPO_NAME}:latest
                    docker images
                """
            }
        }
    }
}
